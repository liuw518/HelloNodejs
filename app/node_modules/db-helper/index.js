var mysql = require("mysql");
var config = require('config');
var logger = require('log-factory').getLogger('db');
// Uncomment if mysql has not been properly promisified yet
var Promise = require("bluebird");
// Promise.promisifyAll(mysql);
var connPrototype = require("mysql/lib/Connection").prototype;
var _beginTransaction = connPrototype.beginTransaction;
connPrototype.beginTransaction = function(options, callback){
    this._inTrans = true;
    _beginTransaction.call(this, options, callback);
}

Promise.promisifyAll(connPrototype);
Promise.promisifyAll(require("mysql/lib/Pool").prototype);

if(config.mysql.outputSQL){
    var queryPrototype = require('mysql/lib/protocol/sequences/Query').prototype;
    var _start = queryPrototype.start;
    queryPrototype.start = function(){
        logger.info(this.sql);
        _start.call(this);
    }
}

var pool = mysql.createPool(config.mysql);
pool.on('acquire', function (connection) {
  logger.debug('从连接池获取连接 %d', connection.threadId);
});
pool.on('connection', function (connection) {
  logger.debug('连接池创建新连接 %d',connection.threadId);
});
pool.on('enqueue', function () {
  logger.debug('排队，等待可用连接...');
});
pool.on('release', function (connection) {
  logger.debug('释放连接 %d', connection.threadId);
});

function getConnection() {
    return pool.getConnectionAsync().disposer(function (connection, promise) {
        if(connection._inTrans){
            if(promise.isFulfilled()){
                logger.debug('提交事务');
                return connection.commitAsync().then(function(){
                    connection._inTrans = false;
                    connection.release();
                });
            } else {
                logger.debug('回滚事务');
                return connection.rollbackAsync().then(function(){
                    connection._inTrans = false;
                    connection.release();
                });
            }
        } else {
            connection.release();
        }
    })
}

module.exports.getConnection = getConnection;